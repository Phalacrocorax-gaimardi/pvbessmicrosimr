// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// demand_cpp
NumericVector demand_cpp(NumericVector day, double D_max, double D_min, double lag_D);
RcppExport SEXP _pvbessmicrosimr_demand_cpp(SEXP daySEXP, SEXP D_maxSEXP, SEXP D_minSEXP, SEXP lag_DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type day(daySEXP);
    Rcpp::traits::input_parameter< double >::type D_max(D_maxSEXP);
    Rcpp::traits::input_parameter< double >::type D_min(D_minSEXP);
    Rcpp::traits::input_parameter< double >::type lag_D(lag_DSEXP);
    rcpp_result_gen = Rcpp::wrap(demand_cpp(day, D_max, D_min, lag_D));
    return rcpp_result_gen;
END_RCPP
}
// day_length_cpp
NumericVector day_length_cpp(NumericVector day, double latitude);
RcppExport SEXP _pvbessmicrosimr_day_length_cpp(SEXP daySEXP, SEXP latitudeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type day(daySEXP);
    Rcpp::traits::input_parameter< double >::type latitude(latitudeSEXP);
    rcpp_result_gen = Rcpp::wrap(day_length_cpp(day, latitude));
    return rcpp_result_gen;
END_RCPP
}
// daylight_usage_cpp
NumericVector daylight_usage_cpp(NumericVector day, double rho_solstice);
RcppExport SEXP _pvbessmicrosimr_daylight_usage_cpp(SEXP daySEXP, SEXP rho_solsticeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type day(daySEXP);
    Rcpp::traits::input_parameter< double >::type rho_solstice(rho_solsticeSEXP);
    rcpp_result_gen = Rcpp::wrap(daylight_usage_cpp(day, rho_solstice));
    return rcpp_result_gen;
END_RCPP
}
// clearness_index_cpp
double clearness_index_cpp(double day, double K_max, double K_min, double phase_K, double exponent);
RcppExport SEXP _pvbessmicrosimr_clearness_index_cpp(SEXP daySEXP, SEXP K_maxSEXP, SEXP K_minSEXP, SEXP phase_KSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type day(daySEXP);
    Rcpp::traits::input_parameter< double >::type K_max(K_maxSEXP);
    Rcpp::traits::input_parameter< double >::type K_min(K_minSEXP);
    Rcpp::traits::input_parameter< double >::type phase_K(phase_KSEXP);
    Rcpp::traits::input_parameter< double >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(clearness_index_cpp(day, K_max, K_min, phase_K, exponent));
    return rcpp_result_gen;
END_RCPP
}
// solar_potential_cpp
NumericVector solar_potential_cpp(NumericVector day, double latitude, double K_max, double K_min, std::string azimuth_angle, double phase_K);
RcppExport SEXP _pvbessmicrosimr_solar_potential_cpp(SEXP daySEXP, SEXP latitudeSEXP, SEXP K_maxSEXP, SEXP K_minSEXP, SEXP azimuth_angleSEXP, SEXP phase_KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type day(daySEXP);
    Rcpp::traits::input_parameter< double >::type latitude(latitudeSEXP);
    Rcpp::traits::input_parameter< double >::type K_max(K_maxSEXP);
    Rcpp::traits::input_parameter< double >::type K_min(K_minSEXP);
    Rcpp::traits::input_parameter< std::string >::type azimuth_angle(azimuth_angleSEXP);
    Rcpp::traits::input_parameter< double >::type phase_K(phase_KSEXP);
    rcpp_result_gen = Rcpp::wrap(solar_potential_cpp(day, latitude, K_max, K_min, azimuth_angle, phase_K));
    return rcpp_result_gen;
END_RCPP
}
// energy_flows_cpp
DataFrame energy_flows_cpp(double S_1, double S_2, std::string aspect, double shading_factor_1, double shading_factor_2, double B, double D_max, double D_min, NumericVector params);
RcppExport SEXP _pvbessmicrosimr_energy_flows_cpp(SEXP S_1SEXP, SEXP S_2SEXP, SEXP aspectSEXP, SEXP shading_factor_1SEXP, SEXP shading_factor_2SEXP, SEXP BSEXP, SEXP D_maxSEXP, SEXP D_minSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S_1(S_1SEXP);
    Rcpp::traits::input_parameter< double >::type S_2(S_2SEXP);
    Rcpp::traits::input_parameter< std::string >::type aspect(aspectSEXP);
    Rcpp::traits::input_parameter< double >::type shading_factor_1(shading_factor_1SEXP);
    Rcpp::traits::input_parameter< double >::type shading_factor_2(shading_factor_2SEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type D_max(D_maxSEXP);
    Rcpp::traits::input_parameter< double >::type D_min(D_minSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(energy_flows_cpp(S_1, S_2, aspect, shading_factor_1, shading_factor_2, B, D_max, D_min, params));
    return rcpp_result_gen;
END_RCPP
}
// seai_grant_cpp
double seai_grant_cpp(List params, double s, double b);
RcppExport SEXP _pvbessmicrosimr_seai_grant_cpp(SEXP paramsSEXP, SEXP sSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(seai_grant_cpp(params, s, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pvbessmicrosimr_demand_cpp", (DL_FUNC) &_pvbessmicrosimr_demand_cpp, 4},
    {"_pvbessmicrosimr_day_length_cpp", (DL_FUNC) &_pvbessmicrosimr_day_length_cpp, 2},
    {"_pvbessmicrosimr_daylight_usage_cpp", (DL_FUNC) &_pvbessmicrosimr_daylight_usage_cpp, 2},
    {"_pvbessmicrosimr_clearness_index_cpp", (DL_FUNC) &_pvbessmicrosimr_clearness_index_cpp, 5},
    {"_pvbessmicrosimr_solar_potential_cpp", (DL_FUNC) &_pvbessmicrosimr_solar_potential_cpp, 6},
    {"_pvbessmicrosimr_energy_flows_cpp", (DL_FUNC) &_pvbessmicrosimr_energy_flows_cpp, 9},
    {"_pvbessmicrosimr_seai_grant_cpp", (DL_FUNC) &_pvbessmicrosimr_seai_grant_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_pvbessmicrosimr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
